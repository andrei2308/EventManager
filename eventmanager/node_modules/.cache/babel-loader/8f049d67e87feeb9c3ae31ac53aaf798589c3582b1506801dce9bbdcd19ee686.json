{"ast":null,"code":"require('dotenv').config();\nconst mongodb = require('mongoose');\nconst express = require('express');\nconst cors = require('cors');\nconst bodyparser = require(\"body-parser\");\nconst helmet = require('helmet');\nconst swaggerUi = require('swagger-ui-express');\nconst {\n  initialize\n} = require('express-openapi');\nconst path = require('path');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst User = require('./model/UserModel.js');\nconst app = express();\napp.use(cors());\napp.use(bodyparser.json());\napp.use(bodyparser.urlencoded({\n  extended: true\n}));\napp.use(helmet({\n  frameguard: {\n    action: 'deny'\n  },\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: ['style.com']\n    }\n  },\n  dnsPrefetchControl: false\n}));\n// Connect to MongoDB\nmongodb.connect(process.env.MONGO_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log('Connected to MongoDB successfully!');\n}).catch(err => {\n  console.error('Error connecting to MongoDB: ' + err);\n});\n// Middleware to authenticate JWT\nfunction authenticateToken(req, res, next) {\n  var _req$headers$authoriz;\n  const token = (_req$headers$authoriz = req.headers['authorization']) === null || _req$headers$authoriz === void 0 ? void 0 : _req$headers$authoriz.split(' ')[1]; // Extract token from Authorization header\n  if (!token) {\n    return res.status(401).json({\n      message: 'Access token missing'\n    });\n  }\n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n    if (err) {\n      return res.status(403).json({\n        message: 'Invalid or expired token'\n      });\n    }\n    req.user = user; // Store user info from the token\n    next();\n  });\n}\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(null, {\n  swaggerOptions: {\n    url: 'http://localhost:' + process.env.PORT + '/openapi.json'\n  }\n}));\napp.get('/openapi.json', (req, res) => {\n  res.json(app.apiDoc);\n});\napp.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      username\n    });\n    console.log('User found:', user);\n    if (!user) {\n      return res.status(401).json({\n        message: 'Invalid username or password'\n      });\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(401).json({\n        message: 'Invalid username or password'\n      });\n    }\n    const token = jwt.sign({\n      id: user._id,\n      username: user.username\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1h'\n    });\n    res.json({\n      token,\n      message: 'Login successful!'\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      message: 'Server error during login: ' + error.message\n    });\n  }\n});\napp.post('/register', async (req, res) => {\n  const {\n    username,\n    password,\n    email\n  } = req.body;\n  try {\n    const existingUser = await User.findOne({\n      username\n    });\n    if (existingUser) {\n      return res.status(400).json({\n        message: 'User already exists'\n      });\n    }\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new User({\n      username,\n      password: hashedPassword,\n      email\n    });\n    await newUser.save();\n    res.status(201).json({\n      message: 'Registration successful!'\n    });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      message: 'Server error during registration: ' + error.message\n    });\n  }\n});\napp.get('/user', authenticateToken, async (req, res) => {\n  console.log('User route hit');\n  console.log('Decoded user from token:', req.user);\n  try {\n    const user = await User.findById(req.user.id); // Retrieve user by ID from token payload\n    if (!user) {\n      return res.status(404).json({\n        message: 'User not found'\n      });\n    }\n    res.json({\n      message: 'User info',\n      user\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Server error fetching user data: ' + error.message\n    });\n  }\n});\nconst apiDoc = {\n  openapi: '3.0.0',\n  info: {\n    title: 'My API',\n    version: '1.0.0',\n    description: 'A simple API using express-openapi'\n  },\n  paths: {\n    '/hello': {\n      get: {\n        summary: 'Get a greeting',\n        description: 'Returns a simple greeting message.',\n        responses: {\n          200: {\n            description: 'Successful response',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    message: {\n                      type: 'string',\n                      example: 'Hello, world!'\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\napp.apiDoc = apiDoc;\ninitialize({\n  app,\n  apiDoc,\n  app,\n  apiDoc: {\n    openapi: '3.0.0',\n    info: {\n      title: 'My API',\n      version: '1.0.0',\n      description: 'A simple API using express-openapi'\n    },\n    paths: {\n      '/hello': {\n        get: {\n          summary: 'Get a greeting',\n          description: 'Returns a simple greeting message.',\n          responses: {\n            200: {\n              description: 'Successful response',\n              content: {\n                'application/json': {\n                  schema: {\n                    type: 'object',\n                    properties: {\n                      message: {\n                        type: 'string',\n                        example: 'Hello, world!'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  paths: path.resolve(__dirname, './api-routes')\n});\nexport const port = process.env.PORT || 5000;\napp.listen(port, () => {\n  console.log(`Server started on port ${port}, waiting for requests. . .`);\n});","map":{"version":3,"names":["require","config","mongodb","express","cors","bodyparser","helmet","swaggerUi","initialize","path","bcrypt","jwt","User","app","use","json","urlencoded","extended","frameguard","action","contentSecurityPolicy","directives","defaultSrc","styleSrc","dnsPrefetchControl","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","authenticateToken","req","res","next","_req$headers$authoriz","token","headers","split","status","message","verify","JWT_SECRET","user","serve","setup","swaggerOptions","url","PORT","get","apiDoc","post","username","password","body","findOne","isMatch","compare","sign","id","_id","expiresIn","email","existingUser","hashedPassword","hash","newUser","save","findById","openapi","info","title","version","description","paths","summary","responses","content","schema","type","properties","example","resolve","__dirname","port","listen"],"sources":["C:/Users/Andrei/WebTech-Project/eventmanager/src/server.js"],"sourcesContent":["require('dotenv').config();\r\nconst mongodb = require('mongoose');\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst bodyparser = require(\"body-parser\")\r\nconst helmet = require('helmet')\r\n\r\nconst swaggerUi = require('swagger-ui-express');\r\nconst { initialize } = require('express-openapi');\r\nconst path = require('path');\r\n\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst User = require('./model/UserModel.js');\r\n\r\nconst app = express()\r\napp.use(cors());\r\napp.use(bodyparser.json());\r\napp.use(bodyparser.urlencoded({ extended: true }));\r\napp.use(helmet({\r\n    frameguard: {\r\n        action: 'deny'\r\n    },\r\n    contentSecurityPolicy: {\r\n        directives: {\r\n            defaultSrc: [\"'self'\"],\r\n            styleSrc: ['style.com'],\r\n        }\r\n    },\r\n    dnsPrefetchControl: false\r\n}))\r\n// Connect to MongoDB\r\nmongodb.connect(process.env.MONGO_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n})\r\n    .then(() => {\r\n        console.log('Connected to MongoDB successfully!');\r\n    })\r\n    .catch((err) => {\r\n        console.error('Error connecting to MongoDB: ' + err);\r\n    });\r\n// Middleware to authenticate JWT\r\nfunction authenticateToken(req, res, next) {\r\n    const token = req.headers['authorization']?.split(' ')[1]; // Extract token from Authorization header\r\n    if (!token) {\r\n        return res.status(401).json({ message: 'Access token missing' });\r\n    }\r\n\r\n    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\r\n        if (err) {\r\n            return res.status(403).json({ message: 'Invalid or expired token' });\r\n        }\r\n        req.user = user;  // Store user info from the token\r\n        next();\r\n    });\r\n}\r\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(null, {\r\n    swaggerOptions: { url: 'http://localhost:' + process.env.PORT + '/openapi.json' },\r\n}));\r\n\r\n\r\napp.get('/openapi.json', (req, res) => {\r\n    res.json(app.apiDoc);\r\n});\r\n\r\napp.post('/login', async (req, res) => {\r\n    const { username, password } = req.body;\r\n\r\n    try {\r\n        const user = await User.findOne({ username });\r\n        console.log('User found:', user);\r\n        if (!user) {\r\n            return res.status(401).json({ message: 'Invalid username or password' });\r\n        }\r\n\r\n        const isMatch = await bcrypt.compare(password, user.password);\r\n        if (!isMatch) {\r\n            return res.status(401).json({ message: 'Invalid username or password' });\r\n        }\r\n\r\n        const token = jwt.sign({ id: user._id, username: user.username }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n        res.json({ token, message: 'Login successful!' });\r\n    } catch (error) {\r\n        console.error('Login error:', error);\r\n        res.status(500).json({ message: 'Server error during login: ' + error.message });\r\n    }\r\n});\r\napp.post('/register', async (req, res) => {\r\n    const { username, password, email } = req.body;\r\n\r\n    try {\r\n        const existingUser = await User.findOne({ username });\r\n        if (existingUser) {\r\n            return res.status(400).json({ message: 'User already exists' });\r\n        }\r\n\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n        const newUser = new User({ username, password: hashedPassword, email });\r\n        await newUser.save();\r\n\r\n        res.status(201).json({ message: 'Registration successful!' });\r\n    } catch (error) {\r\n        console.error('Registration error:', error);\r\n        res.status(500).json({ message: 'Server error during registration: ' + error.message });\r\n    }\r\n});\r\napp.get('/user', authenticateToken, async (req, res) => {\r\n    console.log('User route hit');\r\n    console.log('Decoded user from token:', req.user);\r\n    try {\r\n        const user = await User.findById(req.user.id);  // Retrieve user by ID from token payload\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n        res.json({ message: 'User info', user });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Server error fetching user data: ' + error.message });\r\n    }\r\n});\r\nconst apiDoc = {\r\n    openapi: '3.0.0',\r\n    info: {\r\n        title: 'My API',\r\n        version: '1.0.0',\r\n        description: 'A simple API using express-openapi',\r\n    },\r\n    paths: {\r\n        '/hello': {\r\n            get: {\r\n                summary: 'Get a greeting',\r\n                description: 'Returns a simple greeting message.',\r\n                responses: {\r\n                    200: {\r\n                        description: 'Successful response',\r\n                        content: {\r\n                            'application/json': {\r\n                                schema: {\r\n                                    type: 'object',\r\n                                    properties: {\r\n                                        message: {\r\n                                            type: 'string',\r\n                                            example: 'Hello, world!',\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\napp.apiDoc = apiDoc;\r\n\r\ninitialize({\r\n    app,\r\n    apiDoc,\r\n    app,\r\n    apiDoc: {\r\n        openapi: '3.0.0',\r\n        info: {\r\n            title: 'My API',\r\n            version: '1.0.0',\r\n            description: 'A simple API using express-openapi',\r\n        },\r\n        paths: {\r\n            '/hello': {\r\n                get: {\r\n                    summary: 'Get a greeting',\r\n                    description: 'Returns a simple greeting message.',\r\n                    responses: {\r\n                        200: {\r\n                            description: 'Successful response',\r\n                            content: {\r\n                                'application/json': {\r\n                                    schema: {\r\n                                        type: 'object',\r\n                                        properties: {\r\n                                            message: {\r\n                                                type: 'string',\r\n                                                example: 'Hello, world!',\r\n                                            },\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    },\r\n    paths: path.resolve(__dirname, './api-routes'),\r\n});\r\n\r\n\r\nexport const port = process.env.PORT || 5000;\r\napp.listen(port, () => {\r\n    console.log(`Server started on port ${port}, waiting for requests. . .`);\r\n});\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}